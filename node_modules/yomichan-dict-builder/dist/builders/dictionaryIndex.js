"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DictionaryIndex = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
class DictionaryIndex {
    constructor(_index) {
        this.index = _index || {
            title: '',
            revision: '',
            format: 3,
            author: '',
            description: '',
            attribution: '',
        };
    }
    setTitle(title) {
        this.index.title = title;
        return this;
    }
    setRevision(revision) {
        this.index.revision = revision;
        return this;
    }
    setFormat(format) {
        this.index.format = format;
        return this;
    }
    setAuthor(author) {
        this.index.author = author;
        return this;
    }
    setIsUpdatable(isUpdatable) {
        this.index.isUpdatable = isUpdatable;
        return this;
    }
    setIndexUrl(indexUrl) {
        this.index.indexUrl = indexUrl;
        return this;
    }
    setDownloadUrl(downloadUrl) {
        this.index.downloadUrl = downloadUrl;
        return this;
    }
    setDescription(description) {
        this.index.description = description;
        return this;
    }
    setAttribution(attribution) {
        this.index.attribution = attribution;
        return this;
    }
    setUrl(url) {
        this.index.url = url;
        return this;
    }
    setSequenced(sequenced) {
        this.index.sequenced = sequenced;
        return this;
    }
    setFrequencyMode(mode) {
        this.index.frequencyMode = mode;
        return this;
    }
    build() {
        if (!this.index.title)
            throw new Error('Title is required');
        if (!this.index.revision)
            throw new Error('Revision is required');
        if (!this.index.author)
            throw new Error('Author is required');
        if (!this.index.description)
            throw new Error('Description is required');
        if (!this.index.attribution)
            throw new Error('Attribution is required');
        return this.index;
    }
    /**
     * Exports the dictionary index to a JSON file (useful for auto updating dictionaries)
     * @param directory - The directory to export the dictionary to
     */
    export(directory = './', fileName = 'index.json') {
        return __awaiter(this, void 0, void 0, function* () {
            // Create directory if it doesn't exist
            if (!fs_1.default.existsSync(directory)) {
                fs_1.default.mkdirSync(directory);
            }
            const saveFullPath = path_1.default.join(directory, fileName);
            fs_1.default.writeFileSync(saveFullPath, JSON.stringify(this.index));
        });
    }
}
exports.DictionaryIndex = DictionaryIndex;
